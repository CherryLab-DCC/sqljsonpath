import parse from "./parser.js";
import serialize from "./serialize.js";

// Extracted from https://github.com/postgres/postgres/blob/master/src/test/regress/sql/jsonb_jsonpath.sql at 927d9ab
const roundtrip = [
  "$",
  "1",
  "$.a.b",
  "$.b",
  "$.a + 2",
  "$.b + 2",
  "$.a.a",
  "$.*.a",
  "$.*.b",
  "strict $.*.b",
  "$.*",
  "$.**{1}",
  "$.**{2}",
  "$.**{3}",
  "$[*]",
  "$[1]",
  "strict $[1]",
  "$[10000000000000000]",
  "strict $[10000000000000000]",
  "$[0]",
  "$[0.3]",
  "$[0.5]",
  "$[0.9]",
  "$[1.2]",
  "strict $[1.2]",
  "$ ? (@.a[*] > @.b[*])",
  "$ ? (@.a[*] >= @.b[*])",
  "strict $ ? (@.a[*] >= @.b[*])",
  '$ ? ((@ == "1") is unknown)',
  "$ ? ((@ == 1) is unknown)",
  "$[0 to 1] ? (@.a > 1)",
  "$[*].a",
  "strict $[*].a",
  "$.a",
  "strict $.a",
  "strict $.*",
  "strict $[*]",
  'strict $["a"]',
  "$.a",
  "$.*.a",
  "$[*].*",
  "$[0].a",
  "$[1].a",
  "$[2].a",
  "$[0, 1].a",
  "$[0 to 10].a",
  "$[0 to 10 / 0].a",
  "$[2.5 - 1 to $.size() - 2]",
  "$[0]",
  "$[*]",
  "$[last]",
  "$[last ? (exists (last))]",
  "strict $[last]",
  "$[last - 1]",
  '$[last ? (@.type() == "number")]',
  '$[last ? (@.type() == "string")]',
  "$ ? (@.a < $value)",
  "$.a ? (@ < $value)",
  "$[*] ? (@ < $value)",
  "$[0, 1] ? (@ < $x.value)",
  "$[0 to 2] ? (@ < $value)",
  '$[*] ? (@ == "1")',
  "$[*] ? (@ == $value)",
  "$[*] ? (@ != null)",
  "$[*] ? (@ == null)",
  "$ ? (@ == @)",
  "strict $ ? (@ == @)",
  "$.**",
  "$.**{0}",
  "$.**",
  "$.**{1 to last}",
  "$.**{2 to last}",
  "$.**{3 to last}",
  "$.**{last}",
  "$.**.b ? (@ > 0)",
  "$.**{0}.b ? (@ > 0)",
  "$.**{1}.b ? (@ > 0)",
  "$.**.b ? (@ > 0)",
  "$.**{1 to last}.b ? (@ > 0)",
  "$.**{1 to 2}.b ? (@ > 0)",
  "$.**{2 to 3}.b ? (@ > 0)",
  "$.**.b ? (@ > 0)",
  "$.**{0}.b ? (@ > 0)",
  "$.**{1}.b ? (@ > 0)",
  "$.**.b ? (@ > 0)",
  "$.**{1 to last}.b ? (@ > 0)",
  "$.**{1 to 2}.b ? (@ > 0)",
  "$.**{2 to 3}.b ? (@ > 0)",
  "$.g ? (exists (@.x))",
  "$.g ? (exists (@.y))",
  "$.g ? (exists (@.x ? (@ >= 2)))",
  "$.g ? (exists (@.x))",
  '$.g ? (exists (@.x + "3"))',
  '$.g ? ((exists (@.x + "3")) is unknown)',
  "strict $.g[*] ? (exists (@.x))",
  "strict $.g[*] ? ((exists (@.x)) is unknown)",
  "strict $.g ? (exists (@[*].x))",
  "strict $.g ? ((exists (@[*].x)) is unknown)",
  "$ ? (@.a == @.b)",
  "$.c ? (@.a == @.b)",
  "$.c ? ($.c.a == @.b)",
  "$.* ? (@.a == @.b)",
  "$.** ? (@.a == @.b)",
  "$.** ? (@.a == 1 + 1)",
  "$.** ? (@.a == 1 + 1)",
  "$.** ? (@.a == @.b + 1)",
  "$.** ? (@.a == @.b + 1)",
  "$.** ? (@.a == -1)",
  "$.** ? (@.a == -1)",
  "$.** ? (@.a == -@.b)",
  "$.** ? (@.a == -@.b)",
  "$.** ? (@.a == 1 - @.b)",
  "$.** ? (@.a == 1 - -@.b)",
  "$.** ? (@.a == 1 - +@.b)",
  "$ ? (+@[*] > 2)",
  "$ ? (+@[*] > 3)",
  "$ ? (-@[*] < -2)",
  "$ ? (-@[*] < -3)",
  "$ ? ($ > 0)",
  "$[*] ? (2 / @ > 0)",
  "$[*] ? ((2 / @ > 0) is unknown)",
  "1 / $",
  "1 / $ + 2",
  "-(3 + 1 % $)",
  '$ + "2"',
  "3 * $",
  "-$",
  "+$",
  "-$[*]",
  "strict -$[*]",
  "$.a * 3",
  "$.a + 3",
  "-$.a",
  "$ > 1",
  "$ <= 1",
  '$ == "2"',
  "strict $[*] ? (@[0] > $x)[1]",
  "strict $[*] ? (@[0] < $x)[1]",
  "exists ($[*].a)",
  "strict exists ($[*].a)",
  "$.type()",
  "$.type()",
  "$[*].type()",
  "null.type()",
  "true.type()",
  "123.type()",
  '"123".type()',
  "($.a - 5).abs() + 10",
  "-($.a * $.a).floor() % 4.3",
  "($[*] > 2) ? (@ == true)",
  "($[*] > 3).type()",
  "($[*].a > 3).type()",
  "strict ($[*].a > 3).type()",
  "strict $[*].size()",
  "$[*].size()",
  "$[*].abs()",
  "$[*].floor()",
  "$[*].ceiling()",
  "$[*].ceiling().abs()",
  "$[*].ceiling().abs().type()",
  "$[*].keyvalue()",
  "$.keyvalue()",
  "strict $.keyvalue()",
  "$.keyvalue()",
  "strict $.keyvalue().a",
  "$.keyvalue().key",
  "$.double()",
  "strict $.double()",
  "$.abs()",
  "$.floor()",
  "$.ceiling()",
  '$[*] ? (@ starts with "abc")',
  'strict $ ? (@[*] starts with "abc")',
  'strict $ ? ((@[*] starts with "abc") is unknown)',
  '$ ? (@[*] starts with "abc")',
  '$ ? ((@[*] starts with "abc") is unknown)',
  '$[*] ? ((@ starts with "abc") is unknown)',
  '$[*] ? (@ like_regex "^ab.*c")',
  '$[*] ? (@ like_regex "^ab.*c" flag "i")',
  '$[*] ? (@ like_regex "^ab.*c" flag "m")',
  '$[*] ? (@ like_regex "^ab.*c" flag "s")',
  '$[*] ? (@ like_regex "a\\\\b" flag "q")',
  '$[*] ? (@ like_regex "a\\\\b")',
  '$[*] ? (@ like_regex "^a\\\\b$" flag "q")',
  '$[*] ? (@ like_regex "^a\\\\B$" flag "q")',
  '$[*] ? (@ like_regex "^a\\\\B$" flag "iq")',
  '$[*] ? (@ like_regex "^a\\\\b$")',
  "$.datetime()",
  "strict $.datetime()",
  '$.datetime("aaa")',
  '$.datetime("HH24")',
  '$.datetime("dd-mm-yyyy")',
  '$.datetime("dd-mm-yyyy").type()',
  '$.datetime("dd-mm-yyyy HH24:MI").type()',
  '$.datetime("dd-mm-yyyy HH24:MI TZH:TZM").type()',
  '$.datetime("HH24:MI:SS").type()',
  '$.datetime("HH24:MI:SS TZH:TZM").type()',
  '$.datetime("dd-mm-yyyy\\"T\\"HH24:MI:SS")',
  '$.datetime("dd-mm-yyyy HH24:MI")',
  '$.datetime("dd-mm-yyyy HH24:MI TZH")',
  '$.datetime("dd-mm-yyyy HH24:MI TZH:TZM")',
  '$.datetime("HH24:MI")',
  '$.datetime("HH24:MI TZH")',
  '$.datetime("HH24:MI TZH:TZM")',
  "$.datetime().type()",
  '$[*].datetime() ? (@ == "10.03.2017".datetime("dd.mm.yyyy"))',
  '$[*].datetime() ? (@ >= "10.03.2017".datetime("dd.mm.yyyy"))',
  '$[*].datetime() ? (@ < "10.03.2017".datetime("dd.mm.yyyy"))',
  '$[*].datetime() ? (@ == "12:35".datetime("HH24:MI"))',
  '$[*].datetime() ? (@ >= "12:35".datetime("HH24:MI"))',
  '$[*].datetime() ? (@ < "12:35".datetime("HH24:MI"))',
  '$[*].datetime() ? (@ == "12:35 +1".datetime("HH24:MI TZH"))',
  '$[*].datetime() ? (@ >= "12:35 +1".datetime("HH24:MI TZH"))',
  '$[*].datetime() ? (@ < "12:35 +1".datetime("HH24:MI TZH"))',
  '$[*].datetime() ? (@ == "10.03.2017 12:35".datetime("dd.mm.yyyy HH24:MI"))',
  '$[*].datetime() ? (@ >= "10.03.2017 12:35".datetime("dd.mm.yyyy HH24:MI"))',
  '$[*].datetime() ? (@ < "10.03.2017 12:35".datetime("dd.mm.yyyy HH24:MI"))',
  '$[*].datetime() ? (@ == "10.03.2017 12:35 +1".datetime("dd.mm.yyyy HH24:MI TZH"))',
  '$[*].datetime() ? (@ >= "10.03.2017 12:35 +1".datetime("dd.mm.yyyy HH24:MI TZH"))',
  '$[*].datetime() ? (@ < "10.03.2017 12:35 +1".datetime("dd.mm.yyyy HH24:MI TZH"))',
  '$.datetime() > "2020-01-01 12:00:00".datetime()',
  "$[*] ? (@.a > 10)",
  "$[*].a",
  "$[*].a ? (@ == 1)",
  "$[*].a ? (@ > 10)",
  "$[*].a ? (@ > $min && @ < $max)",
  "$[*].a ? (@ > 1)",
  "$[*] ? (@.a > 2)",
  "$[*] ? (@.a > $min && @.a < $max)",
  "$[*].a > 1",
  "$[*].a > 2",
];

describe("roundtrip parse serialize", () => {
  test.each(roundtrip)("%s", (testpath) => {
    const parsed = parse(testpath);
    const actual = serialize(parsed);
    expect(actual).toEqual(testpath);
  });
});
