// Extracted from:
// - https://github.com/postgres/postgres/blob/master/src/test/regress/sql/jsonb_jsonpath.sql at 927d9ab
// - https://github.com/postgres/postgres/blob/master/src/test/regress/sql/jsonpath.sql at bffe1bd
export const testpaths = [
  "$",
  "1",
  "$.a.b",
  "$.b",
  "$.a + 2",
  "$.b + 2",
  "$.a.a",
  "$.*.a",
  "$.*.b",
  "strict $.*.b",
  "$.*",
  "lax $.**{1}",
  "lax $.**{2}",
  "lax $.**{3}",
  "$[*]",
  "$[1]",
  "strict $[1]",
  "lax $[10000000000000000]",
  "strict $[10000000000000000]",
  "$[0]",
  "$[0.3]",
  "$[0.5]",
  "$[0.9]",
  "$[1.2]",
  "strict $[1.2]",
  "$ ? (@.a[*] >  @.b[*])",
  "$ ? (@.a[*] >= @.b[*])",
  "strict $ ? (@.a[*] >= @.b[*])",
  '$ ? ((@ == "1") is unknown)',
  "$ ? ((@ == 1) is unknown)",
  "$[0 to 1] ? (@.a > 1)",
  "lax $[*].a",
  "strict $[*].a",
  "lax $.a",
  "strict $.a",
  "strict $.*",
  "strict $[*]",
  'strict $["a"]',
  "$.a",
  "lax $.*.a",
  "lax $[*].*",
  "lax $[0].a",
  "lax $[1].a",
  "lax $[2].a",
  "lax $[0,1].a",
  "lax $[0 to 10].a",
  "lax $[0 to 10 / 0].a",
  "$[2.5 - 1 to $.size() - 2]",
  "lax $[0]",
  "lax $[*]",
  "$[last]",
  "$[last ? (exists(last))]",
  "strict $[last]",
  "$[last - 1]",
  '$[last ? (@.type() == "number")]',
  '$[last ? (@.type() == "string")]',
  "$ ? (@.a < $value)",
  "$.a ? (@ < $value)",
  "$[*] ? (@ < $value)",
  "$[0,1] ? (@ < $x.value)",
  "$[0 to 2] ? (@ < $value)",
  '$[*] ? (@ == "1")',
  "$[*] ? (@ == $value)",
  "$[*] ? (@ != null)",
  "$[*] ? (@ == null)",
  "$ ? (@ == @)",
  "strict $ ? (@ == @)",
  "lax $.**",
  "lax $.**{0}",
  "lax $.**{0 to last}",
  "lax $.**{1 to last}",
  "lax $.**{2 to last}",
  "lax $.**{3 to last}",
  "lax $.**{last}",
  "lax $.**.b ? (@ > 0)",
  "lax $.**{0}.b ? (@ > 0)",
  "lax $.**{1}.b ? (@ > 0)",
  "lax $.**{0 to last}.b ? (@ > 0)",
  "lax $.**{1 to last}.b ? (@ > 0)",
  "lax $.**{1 to 2}.b ? (@ > 0)",
  "lax $.**{2 to 3}.b ? (@ > 0)",
  "$.**.b ? ( @ > 0)",
  "$.**{0}.b ? ( @ > 0)",
  "$.**{1}.b ? ( @ > 0)",
  "$.**{0 to last}.b ? ( @ > 0)",
  "$.**{1 to last}.b ? ( @ > 0)",
  "$.**{1 to 2}.b ? ( @ > 0)",
  "$.**{2 to 3}.b ? ( @ > 0)",
  "$.g ? (exists (@.x))",
  "$.g ? (exists (@.y))",
  "$.g ? (exists (@.x ? (@ >= 2) ))",
  "lax $.g ? (exists (@.x))",
  'lax $.g ? (exists (@.x + "3"))',
  'lax $.g ? ((exists (@.x + "3")) is unknown)',
  "strict $.g[*] ? (exists (@.x))",
  "strict $.g[*] ? ((exists (@.x)) is unknown)",
  "strict $.g ? (exists (@[*].x))",
  "strict $.g ? ((exists (@[*].x)) is unknown)",
  "$ ? (@.a == @.b)",
  "$.c ? (@.a == @.b)",
  "$.c ? ($.c.a == @.b)",
  "$.* ? (@.a == @.b)",
  "$.** ? (@.a == @.b)",
  "$.** ? (@.a == 1 + 1)",
  "$.** ? (@.a == (1 + 1))",
  "$.** ? (@.a == @.b + 1)",
  "$.** ? (@.a == (@.b + 1))",
  "$.** ? (@.a == - 1)",
  "$.** ? (@.a == -1)",
  "$.** ? (@.a == -@.b)",
  "$.** ? (@.a == - @.b)",
  "$.** ? (@.a == 1 - @.b)",
  "$.** ? (@.a == 1 - - @.b)",
  "$.** ? (@.a == 1 - +@.b)",
  "$ ? (+@[*] > +2)",
  "$ ? (+@[*] > +3)",
  "$ ? (-@[*] < -2)",
  "$ ? (-@[*] < -3)",
  "$ ? ($ > 0)",
  "$[*] ? (2 / @ > 0)",
  "$[*] ? ((2 / @ > 0) is unknown)",
  "1 / $",
  "1 / $ + 2",
  "-(3 + 1 % $)",
  '$ + "2"',
  "3 * $",
  "-$",
  "+$",
  "-$[*]",
  "strict -$[*]",
  "lax $.a * 3",
  "lax $.a + 3",
  "lax -$.a",
  "$ > 1",
  "$ <= 1",
  '$ == "2"',
  "strict $[*] ? (@[0] > $x) [1]",
  "strict $[*] ? (@[0] < $x) [1]",
  "lax exists($[*].a)",
  "strict exists($[*].a)",
  "$.type()",
  "lax $.type()",
  "$[*].type()",
  "null.type()",
  "true.type()",
  "(123).type()",
  '"123".type()',
  "($.a - 5).abs() + 10",
  "-($.a * $.a).floor() % 4.3",
  "($[*] > 2) ? (@ == true)",
  "($[*] > 3).type()",
  "($[*].a > 3).type()",
  "strict ($[*].a > 3).type()",
  "strict $[*].size()",
  "lax $[*].size()",
  "$[*].abs()",
  "$[*].floor()",
  "$[*].ceiling()",
  "$[*].ceiling().abs()",
  "$[*].ceiling().abs().type()",
  "$[*].keyvalue()",
  "$.keyvalue()",
  "strict $.keyvalue()",
  "lax $.keyvalue()",
  "strict $.keyvalue().a",
  "lax $.keyvalue().key",
  "$.double()",
  "strict $.double()",
  "$.abs()",
  "$.floor()",
  "$.ceiling()",
  '$[*] ? (@ starts with "abc")',
  'strict $ ? (@[*] starts with "abc")',
  'strict $ ? ((@[*] starts with "abc") is unknown)',
  'lax $ ? (@[*] starts with "abc")',
  'lax $ ? ((@[*] starts with "abc") is unknown)',
  'lax $[*] ? ((@ starts with "abc") is unknown)',
  'lax $[*] ? (@ like_regex "^ab.*c")',
  'lax $[*] ? (@ like_regex "^ab.*c" flag "i")',
  'lax $[*] ? (@ like_regex "^ab.*c" flag "m")',
  'lax $[*] ? (@ like_regex "^ab.*c" flag "s")',
  'lax $[*] ? (@ like_regex "a\\\\b" flag "q")',
  'lax $[*] ? (@ like_regex "a\\\\b" flag "")',
  'lax $[*] ? (@ like_regex "^a\\\\b$" flag "q")',
  'lax $[*] ? (@ like_regex "^a\\\\B$" flag "q")',
  'lax $[*] ? (@ like_regex "^a\\\\B$" flag "iq")',
  'lax $[*] ? (@ like_regex "^a\\\\b$" flag "")',
  "$.datetime()",
  "strict $.datetime()",
  '$.datetime("aaa")',
  '$.datetime("HH24")',
  '$.datetime("dd-mm-yyyy")',
  '$.datetime("dd-mm-yyyy").type()',
  '$.datetime("dd-mm-yyyy HH24:MI").type()',
  '$.datetime("dd-mm-yyyy HH24:MI TZH:TZM").type()',
  '$.datetime("HH24:MI:SS").type()',
  '$.datetime("HH24:MI:SS TZH:TZM").type()',
  '$.datetime("dd-mm-yyyy\\"T\\"HH24:MI:SS")',
  '$.datetime("dd-mm-yyyy HH24:MI")',
  '$.datetime("dd-mm-yyyy HH24:MI TZH")',
  '$.datetime("dd-mm-yyyy HH24:MI TZH:TZM")',
  '$.datetime("HH24:MI")',
  '$.datetime("HH24:MI TZH")',
  '$.datetime("HH24:MI TZH:TZM")',
  "$.datetime().type()",
  '$[*].datetime() ? (@ == "10.03.2017".datetime("dd.mm.yyyy"))',
  '$[*].datetime() ? (@ >= "10.03.2017".datetime("dd.mm.yyyy"))',
  '$[*].datetime() ? (@ <  "10.03.2017".datetime("dd.mm.yyyy"))',
  '$[*].datetime() ? (@ == "12:35".datetime("HH24:MI"))',
  '$[*].datetime() ? (@ >= "12:35".datetime("HH24:MI"))',
  '$[*].datetime() ? (@ <  "12:35".datetime("HH24:MI"))',
  '$[*].datetime() ? (@ == "12:35 +1".datetime("HH24:MI TZH"))',
  '$[*].datetime() ? (@ >= "12:35 +1".datetime("HH24:MI TZH"))',
  '$[*].datetime() ? (@ <  "12:35 +1".datetime("HH24:MI TZH"))',
  '$[*].datetime() ? (@ == "10.03.2017 12:35".datetime("dd.mm.yyyy HH24:MI"))',
  '$[*].datetime() ? (@ >= "10.03.2017 12:35".datetime("dd.mm.yyyy HH24:MI"))',
  '$[*].datetime() ? (@ < "10.03.2017 12:35".datetime("dd.mm.yyyy HH24:MI"))',
  '$[*].datetime() ? (@ == "10.03.2017 12:35 +1".datetime("dd.mm.yyyy HH24:MI TZH"))',
  '$[*].datetime() ? (@ >= "10.03.2017 12:35 +1".datetime("dd.mm.yyyy HH24:MI TZH"))',
  '$[*].datetime() ? (@ < "10.03.2017 12:35 +1".datetime("dd.mm.yyyy HH24:MI TZH"))',
  '$.datetime() > "2020-01-01 12:00:00".datetime()',
  "$[*] ? (@.a > 10)",
  "$[*].a",
  "$[*].a ? (@ == 1)",
  "$[*].a ? (@ > 10)",
  "$[*].a ? (@ > $min && @ < $max)",
  "$[*].a ? (@ > 1)",
  "$[*] ? (@.a > 2)",
  "$[*] ? (@.a > $min && @.a < $max)",
  "$[*].a > 1",
  "$[*].a > 2",
  // Extras
  "$ <> 1",
  "$ /* comment */ .bar",
  "/*comment*/ $.bar",
  // jsonpath.sql
  "strict $",
  "lax $",
  "$.a.v",
  "$.a.*",
  "$.*[*]",
  "$.a[*]",
  "$.a[*][*]",
  "$[*][0]",
  "$[*][0].a.b",
  "$.a.**.b",
  "$.a.**{2}.b",
  "$.a.**{2 to 2}.b",
  "$.a.**{2 to 5}.b",
  "$.a.**{0 to 5}.b",
  "$.a.**{5 to last}.b",
  "$.a.**{last}.b",
  "$.a.**{last to 5}.b",
  "$+1",
  "$-1",
  "$--+1",
  "$.a/+-1",
  "1 * 2 + 4 % -3 != false",
  `"\\b\\f\\r\\n\\t\\v\\"\\''\\\\"`,
  '"\\x50\\u0067\\u{53}\\u{051}\\u{00004C}"',
  '$.foo\\x50\\u0067\\u{53}\\u{051}\\u{00004C}\\t\\"bar',
  '"\\z"',
  "$.g ? ($.a == 1)",
  "$.g ? (@ == 1)",
  "$.g ? (@.a == 1)",
  "$.g ? (@.a == 1 || @.a == 4)",
  "$.g ? (@.a == 1 && @.a == 4)",
  "$.g ? (@.a == 1 || @.a == 4 && @.b == 7)",
  "$.g ? (@.a == 1 || !(@.a == 4) && @.b == 7)",
  "$.g ? (@.a == 1 || !(@.x >= 123 || @.a == 4) && @.b == 7)",
  '$.g ? (@.x >= @[*]?(@.a > "abc"))',
  "$.g ? ((@.x >= 123 || @.a == 4) is unknown)",
  "$.g ? (exists (@.x ? (@ == 14)))",
  "$.g ? ((@.x >= 123 || @.a == 4) && exists (@.x ? (@ == 14)))",
  "$.g ? (+@.x >= +-(+@.a + 2))",
  "$a",
  "$a.b",
  "$a[*]",
  "$.g ? (@.zip == $zip)",
  "$.a[1,2, 3 to 16]",
  "$.a[$a + 1, ($b[*]) to -($[0] * 2)]",
  "$.a[$.a.size() - 3]",
  '"last"',
  "$.last",
  "$[$[0] ? (last > 0)]",
  "1.type()",
  "(1).type()",
  "1.2.type()",
  '"aaa".type()',
  "$.double().floor().ceiling().abs()",
  "$.keyvalue().key",
  '$.datetime("datetime template")',
  '$ ? (@ starts with "abc")',
  "$ ? (@ starts with $var)",
  '$ ? (@ like_regex "pattern")',
  '$ ? (@ like_regex "pattern" flag "")',
  '$ ? (@ like_regex "pattern" flag "i")',
  '$ ? (@ like_regex "pattern" flag "is")',
  '$ ? (@ like_regex "pattern" flag "isim")',
  '$ ? (@ like_regex "pattern" flag "q")',
  '$ ? (@ like_regex "pattern" flag "iq")',
  '$ ? (@ like_regex "pattern" flag "smixq")',
  "$ < 1",
  "($ < 1) || $.a.b <= $x",
  "($).a.b",
  "($.a.b).c.d",
  "($.a.b + -$.x.y).c.d",
  "(-+$.a.b).c.d",
  "1 + ($.a.b + 2).c.d",
  "1 + ($.a.b > 2).c.d",
  "($)",
  "(($))",
  "((($ + 1)).a + ((2)).b ? ((((@ > 1)) || (exists(@.c)))))",
  "$ ? (@.a < 1)",
  "$ ? (@.a < -1)",
  "$ ? (@.a < +1)",
  "$ ? (@.a < 0.1)",
  "$ ? (@.a < -0.1)",
  "$ ? (@.a < +0.1)",
  "$ ? (@.a < 10.1)",
  "$ ? (@.a < -10.1)",
  "$ ? (@.a < +10.1)",
  "$ ? (@.a < 1e1)",
  "$ ? (@.a < -1e1)",
  "$ ? (@.a < +1e1)",
  "$ ? (@.a < 0.1e1)",
  "$ ? (@.a < -0.1e1)",
  "$ ? (@.a < +0.1e1)",
  "$ ? (@.a < 10.1e1)",
  "$ ? (@.a < -10.1e1)",
  "$ ? (@.a < +10.1e1)",
  "$ ? (@.a < 1e-1)",
  "$ ? (@.a < -1e-1)",
  "$ ? (@.a < +1e-1)",
  "$ ? (@.a < 0.1e-1)",
  "$ ? (@.a < -0.1e-1)",
  "$ ? (@.a < +0.1e-1)",
  "$ ? (@.a < 10.1e-1)",
  "$ ? (@.a < -10.1e-1)",
  "$ ? (@.a < +10.1e-1)",
  "$ ? (@.a < 1e+1)",
  "$ ? (@.a < -1e+1)",
  "$ ? (@.a < +1e+1)",
  "$ ? (@.a < 0.1e+1)",
  "$ ? (@.a < -0.1e+1)",
  "$ ? (@.a < +0.1e+1)",
  "$ ? (@.a < 10.1e+1)",
  "$ ? (@.a < -10.1e+1)",
  "$ ? (@.a < +10.1e+1)",
  "0",
  "0.0",
  "0.000",
  "0.000e1",
  "0.000e2",
  "0.000e3",
  "0.0010",
  "0.0010e-1",
  "0.0010e+1",
  "0.0010e+2",
  "1.e",
  "1.2.e",
  "(1.2).e",
  "1e3",
  "1.e3",
  "1.e3.e",
  "1.e3.e4",
  "1.2e3",
  "1.2.e3",
  "(1.2).e3",
];
